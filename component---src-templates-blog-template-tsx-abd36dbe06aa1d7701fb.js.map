{"version":3,"sources":["webpack:///./src/components/seo.tsx","webpack:///./src/templates/blogTemplate.tsx"],"names":["SEO","description","lang","meta","title","image","site","useStaticQuery","metaDescription","siteMetadata","seoTitle","imageUrl","htmlAttributes","titleTemplate","name","content","property","twitterUserName","concat","defaultProps","GoToTop","styled","div","Template","markdownRemark","data","frontmatter","html","className","date","dangerouslySetInnerHTML","__html","tags","map","tagName","key","to","pageQuery"],"mappings":"2FAAA,iDAaA,SAASA,EAAT,GAAiE,YAAlDC,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,MACrCC,EAASC,YAAe,cAAxBD,KAiBFE,EAAkBP,GAAeK,EAAKG,aAAaR,YACnDS,EAAWN,IAAK,UAAIE,EAAKG,oBAAT,aAAI,EAAmBL,OACvCO,EAAWN,IAAK,UAAIC,EAAKG,oBAAT,aAAI,EAAmBJ,QAA5B,GAEjB,OACE,kBAAC,IAAD,CACEO,eAAgB,CACdV,QAEFE,MAAOM,EACPG,cAAa,UAAEP,EAAKG,oBAAP,aAAE,EAAmBI,cAClCV,KAAM,CACJ,CACEW,KAAM,cACNC,QAASP,GAEX,CACEQ,SAAU,WACVD,QAASL,GAEX,CACEM,SAAU,iBACVD,QAASP,GAEX,CACEQ,SAAU,UACVD,QAAS,WAEX,CACEC,SAAU,WACVD,QAASJ,GAEX,CACEG,KAAM,gBACNC,QAASJ,GAEX,CACEG,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,SAAS,UAAAT,EAAKG,oBAAL,eAAmBQ,kBAAnB,IAEX,CACEH,KAAM,gBACNC,QAASX,GAEX,CACEU,KAAM,sBACNC,QAASP,IAEXU,OAAOf,KAKfH,EAAImB,aAAe,CACjBjB,KAAM,KACNC,KAAM,GACNF,YAAa,GACbI,MAAO,kBAWML,O,kCCvGf,0HAOMoB,EAAUC,IAAOC,IAAV,4EAAGD,CAAH,oBAoCEE,UA5BE,SAAC,GAAoB,MAC5BC,EAD4B,EAAlBC,KACVD,eACAE,EAAsBF,EAAtBE,YAAaC,EAASH,EAATG,KACrB,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAKvB,MAAOsB,EAAYtB,MAAOC,MAAOqB,EAAYrB,QAClD,yBAAKuB,UAAU,aACb,4BAAKF,EAAYtB,OACjB,4BAAKsB,EAAYG,MACjB,yBACED,UAAU,oBACVE,wBAAyB,CAAEC,OAAQJ,MAPzC,UAUID,EAAYM,YAVhB,aAUI,EAAkBC,KAAI,SAACC,GAAsB,OAC7C,0BAAMC,IAAQD,EAAL,QACP,kBAAC,IAAD,CAAME,GAAE,SAAWF,GAAnB,IAAgCA,EAAhC,UAGJ,kBAACd,EAAD,KACE,kBAAC,IAAD,CAAMgB,GAAI,KAAV,sBAyBH,IAAMC,EAAY","file":"component---src-templates-blog-template-tsx-abd36dbe06aa1d7701fb.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nexport interface SEOData {\n  description: string\n  lang: string\n  meta: {name: string, content: string}[]\n  title: string\n  image: string\n}\n\nfunction SEO({ description, lang, meta, title, image }: SEOData) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            titleTemplate\n            description\n            author\n            image\n            twitterUserName\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const seoTitle = title || site.siteMetadata?.title\n  const imageUrl = image || site.siteMetadata?.image || ``\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={seoTitle}\n      titleTemplate={site.siteMetadata?.titleTemplate}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: seoTitle,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          property: \"og:image\",\n          content: imageUrl,\n        },\n        {\n          name: \"twitter:image\",\n          content: imageUrl,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.twitterUserName || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `ja`,\n  meta: [],\n  description: ``,\n  image: '/blog_logo.jpg'\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  image: PropTypes.string\n}\n\nexport default SEO","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport SEO from \"../components/seo\"\nimport styled from 'styled-components'\nimport PropTypes from \"prop-types\"\nimport Layout from \"../components/layout\"\n\nconst GoToTop = styled.div`\nmargin: 1rem 0;\n`\ninterface Props {\n  readonly data: blogData\n  readonly pageContext: any\n}\n\nconst Template = ({ data }: Props) => {\n  const { markdownRemark } = data\n  const { frontmatter, html } = markdownRemark\n  return (\n    <Layout>\n      <div>\n        <SEO title={frontmatter.title} image={frontmatter.image}/>\n        <div className=\"blog-post\">\n          <h1>{frontmatter.title}</h1>\n          <h2>{frontmatter.date}</h2>\n          <div\n            className=\"blog-post-content\"\n            dangerouslySetInnerHTML={{ __html: html }}\n          />\n        </div>\n        { frontmatter.tags?.map((tagName: string) => { return (\n          <span key={`${tagName}-tag`}>\n            <Link to={`/tags/${tagName}`}>#{tagName}&nbsp;&nbsp;</Link>\n        </span>\n        )})}\n        <GoToTop>\n          <Link to={\"/\"}>Go to top page</Link>\n        </GoToTop>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Template\n\nTemplate.propTypes = {\n  pageContext: PropTypes.any,\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      html: PropTypes.string.isRequired,\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n        date: PropTypes.string.isRequired,\n        slug: PropTypes.string.isRequired,\n        image: PropTypes.string,\n        tags: PropTypes.arrayOf(PropTypes.string)\n      }),\n    }).isRequired\n  })\n}\n\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    markdownRemark(frontmatter: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        date(formatString: \"YYYY-MM-DD\")\n        slug\n        title\n        image\n        tags\n      }\n    }\n  }\n`\n\ninterface blogData {\n  markdownRemark: {\n    html: string\n    frontmatter: {\n      title: string\n      date: string\n      slug: string\n      image: string\n      tags: string[]\n    }\n  }\n}"],"sourceRoot":""}