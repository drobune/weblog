{"version":3,"sources":["webpack:///./src/components/seo.tsx","webpack:///./src/components/postlink.tsx","webpack:///./src/pages/index.tsx","webpack:///./src/components/tagIndex.tsx"],"names":["SEO","description","lang","meta","title","image","site","useStaticQuery","metaDescription","siteMetadata","seoTitle","imageUrl","htmlAttributes","titleTemplate","name","content","property","twitterUserName","concat","defaultProps","PostLink","post","to","frontmatter","slug","date","pageQuery","IndexPage","Posts","data","allMarkdownRemark","edges","filter","edge","node","map","key","id","style","fontSize","marginTop","TagIndex","group","tagsGroup","tagName","fieldValue"],"mappings":"2FAAA,iDAaA,SAASA,EAAT,GAAiE,YAAlDC,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,MACrCC,EAASC,YAAe,cAAxBD,KAiBFE,EAAkBP,GAAeK,EAAKG,aAAaR,YACnDS,EAAWN,IAAK,UAAIE,EAAKG,oBAAT,aAAI,EAAmBL,OACvCO,EAAWN,IAAK,UAAIC,EAAKG,oBAAT,aAAI,EAAmBJ,QAA5B,GAEjB,OACE,kBAAC,IAAD,CACEO,eAAgB,CACdV,QAEFE,MAAOM,EACPG,cAAa,UAAEP,EAAKG,oBAAP,aAAE,EAAmBI,cAClCV,KAAM,CACJ,CACEW,KAAM,cACNC,QAASP,GAEX,CACEQ,SAAU,WACVD,QAASL,GAEX,CACEM,SAAU,iBACVD,QAASP,GAEX,CACEQ,SAAU,UACVD,QAAS,WAEX,CACEC,SAAU,WACVD,QAASJ,GAEX,CACEG,KAAM,gBACNC,QAASJ,GAEX,CACEG,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,SAAS,UAAAT,EAAKG,oBAAL,eAAmBQ,kBAAnB,IAEX,CACEH,KAAM,gBACNC,QAASX,GAEX,CACEU,KAAM,sBACNC,QAASP,IAEXU,OAAOf,KAKfH,EAAImB,aAAe,CACjBjB,KAAM,KACNC,KAAM,GACNF,YAAa,IAUAD,O,wHC3FAoB,EAPE,SAAC,GAAD,IAAIC,EAAJ,EAAIA,KAAJ,OACf,6BACE,kBAAC,IAAD,CAAMC,GAAID,EAAKE,YAAYC,MACxBH,EAAKE,YAAYnB,MADpB,KAC6BiB,EAAKE,YAAYE,KAD9C,O,wBCsCSC,GALEC,UAhCG,SAAC,GAUb,IACEC,EADF,EATeC,KACEC,kBAAqBC,MAUvCC,QAAO,SAAAC,GAAI,QAAMA,EAAKC,KAAKX,YAAYE,QACvCU,KAAI,SAAAF,GAAI,OAAI,kBAAC,EAAD,CAAUG,IAAKH,EAAKC,KAAKG,GAAIhB,KAAMY,EAAKC,UACvD,OACA,6BACE,kBAAC,IAAD,CAAK9B,MAAK,SACV,8CACA,qCACA,6BAAMwB,GACN,oCACA,kBAAC,IAAD,MACA,uCACA,kBAAC,IAAD,CAAMN,GAAI,sBAAV,QACA,6BACE,uBAAGgB,MAAO,CAACC,SAAU,QAASC,UAAW,SAAS,6BAAlD,iHAYmB,e,kCC3CzB,4BA4CeC,IAzCE,WACf,IAUQC,EAVoBnC,YAAe,cAUpBoC,UAAfD,MACR,OACE,2BACE,0BACGA,EAAMP,KAAI,SAACD,GACV,IAAMU,EAAUV,EAAKW,WACrB,OACE,wBAAMT,IAAKQ,GACT,gBAAC,IAAD,CAAMtB,GAAE,SAAWsB,GAAnB,IAAgCA,EAAhC","file":"component---src-pages-index-tsx-b83f7cd8c82341b4f74a.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nexport interface SEOData {\n  description: string\n  lang: string\n  meta: {name: string, content: string}[]\n  title: string\n  image: string\n}\n\nfunction SEO({ description, lang, meta, title, image }: SEOData) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            titleTemplate\n            description\n            author\n            image\n            twitterUserName\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const seoTitle = title || site.siteMetadata?.title\n  const imageUrl = image || site.siteMetadata?.image || ``\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={seoTitle}\n      titleTemplate={site.siteMetadata?.titleTemplate}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: seoTitle,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          property: \"og:image\",\n          content: imageUrl,\n        },\n        {\n          name: \"twitter:image\",\n          content: imageUrl,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.twitterUserName || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `ja`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst PostLink = ( { post }: {post :PostData} ) => (\n  <div>\n    <Link to={post.frontmatter.slug}>\n      {post.frontmatter.title} ({post.frontmatter.date})\n    </Link>\n  </div>\n)\nexport default PostLink\n\nexport interface PostData {\n  id: string\n  excerpt: string\n  frontmatter: {\n    date: string\n    slug: string\n    title: string\n  }\n}\n\n","import React from \"react\"\nimport PostLink, {PostData} from \"../components/postlink\"\nimport { graphql, Link } from \"gatsby\"\nimport TagIndex from \"../components/tagIndex\"\nimport SEO from \"../components/seo\"\n\nconst IndexPage = ({\n                     data: {\n                       allMarkdownRemark: { edges  },\n                     },\n                   }: {\n  data:\n    {\n      allMarkdownRemark:\n        { edges: PostsData }\n    }\n}) => {\n  const Posts = edges\n    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n    .map(edge => <PostLink key={edge.node.id} post={edge.node}/>)\n  return(\n  <div>\n    <SEO title={`Home`} />\n    <h1>DROBUNE Weblog</h1>\n    <h3>Posts</h3>\n    <div>{Posts}</div>\n    <h3>Tags</h3>\n    <TagIndex/>\n    <h3>Profile</h3>\n    <Link to={\"https://drobune.nl\"}>link</Link>\n    <div>\n      <p style={{fontSize: \"small\", marginTop: \"2rem\"}}><br/>\n      当ブログはamzon.co.jpを宣伝しリンクすることによってサイトが紹介料を獲得できる手段を提供することを目的に設定されたアフィリエイト宣伝プログラムである、 Amazonアソシエイト・プログラムの参加者です。\n      </p>\n    </div>\n  </div>)\n}\n\nexport default IndexPage\n\ntype PostsData = Array<{node: PostData }>\n\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            slug\n            title\n          }\n        }\n      }\n    }\n  }`\n\n","import * as React from \"react\"\nimport { Link, graphql, useStaticQuery } from \"gatsby\"\n\nconst TagIndex = () => {\n  const data: PageQueryData = useStaticQuery(graphql`  \n  query getAllTags {\n    tagsGroup: allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___tags) {\n        fieldValue\n      }\n    }\n  }\n  `)\n\n  const { group } = data.tagsGroup\n  return (\n    <div>\n      <ul>\n        {group.map((node ) => {\n          const tagName = node.fieldValue\n          return (\n            <span key={tagName}>\n              <Link to={`/tags/${tagName}`}>#{tagName}&nbsp;</Link>\n            </span>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  tagsGroup: {\n    group: [\n      { fieldValue: any }\n    ]\n  }\n}\n\nexport default TagIndex\n"],"sourceRoot":""}