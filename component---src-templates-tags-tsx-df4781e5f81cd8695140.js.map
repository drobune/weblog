{"version":3,"sources":["webpack:///./src/components/seo.tsx","webpack:///./src/templates/tags.tsx"],"names":["SEO","description","lang","meta","title","image","site","useStaticQuery","metaDescription","siteMetadata","seoTitle","imageUrl","htmlAttributes","titleTemplate","name","content","property","twitterUserName","concat","defaultProps","Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","map","node","slug","fields","frontmatter","key","to","pageQuery"],"mappings":"2FAAA,iDAaA,SAASA,EAAT,GAAiE,YAAlDC,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,MACrCC,EAASC,YAAe,cAAxBD,KAiBFE,EAAkBP,GAAeK,EAAKG,aAAaR,YACnDS,EAAWN,IAAK,UAAIE,EAAKG,oBAAT,aAAI,EAAmBL,OACvCO,EAAWN,IAAK,UAAIC,EAAKG,oBAAT,aAAI,EAAmBJ,QAA5B,GAEjB,OACE,kBAAC,IAAD,CACEO,eAAgB,CACdV,QAEFE,MAAOM,EACPG,cAAa,UAAEP,EAAKG,oBAAP,aAAE,EAAmBI,cAClCV,KAAM,CACJ,CACEW,KAAM,cACNC,QAASP,GAEX,CACEQ,SAAU,WACVD,QAASL,GAEX,CACEM,SAAU,iBACVD,QAASP,GAEX,CACEQ,SAAU,UACVD,QAAS,WAEX,CACEC,SAAU,WACVD,QAASJ,GAEX,CACEG,KAAM,gBACNC,QAASJ,GAEX,CACEG,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,SAAS,UAAAT,EAAKG,oBAAL,eAAmBQ,kBAAnB,IAEX,CACEH,KAAM,gBACNC,QAASX,GAEX,CACEU,KAAM,sBACNC,QAASP,IAEXU,OAAOf,KAKfH,EAAImB,aAAe,CACjBjB,KAAM,KACNC,KAAM,GACNF,YAAa,GACbI,MAAO,kBAWML,O,kCCvGf,8GAqFeoB,UA1EF,SAAC,GAAiC,IAA/BC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,KACnBC,EAAQF,EAARE,IADqC,EAEfD,EAAKE,kBAA3BC,EAFqC,EAErCA,MAAOC,EAF8B,EAE9BA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAGf,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAKnB,MAAK,OAASuB,IACnB,4BAAKA,GACL,4BACGF,EAAMG,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACA1B,EAAUyB,EAAKG,YAAf5B,MACR,OACE,wBAAI6B,IAAKH,GACP,kBAAC,IAAD,CAAMI,GAAE,QAAUJ,GAAS1B,QAKnC,kBAAC,IAAD,CAAM8B,GAAG,SAAT,eAsDD,IAAMC,EAAY","file":"component---src-templates-tags-tsx-df4781e5f81cd8695140.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nexport interface SEOData {\n  description: string\n  lang: string\n  meta: {name: string, content: string}[]\n  title: string\n  image: string\n}\n\nfunction SEO({ description, lang, meta, title, image }: SEOData) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            titleTemplate\n            description\n            author\n            image\n            twitterUserName\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const seoTitle = title || site.siteMetadata?.title\n  const imageUrl = image || site.siteMetadata?.image || ``\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={seoTitle}\n      titleTemplate={site.siteMetadata?.titleTemplate}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: seoTitle,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          property: \"og:image\",\n          content: imageUrl,\n        },\n        {\n          name: \"twitter:image\",\n          content: imageUrl,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.twitterUserName || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `ja`,\n  meta: [],\n  description: ``,\n  image: '/blog_logo.jpg'\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  image: PropTypes.string\n}\n\nexport default SEO","import React from \"react\"\nimport SEO from \"../components/seo\"\nimport PropTypes from \"prop-types\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\n\ninterface Props {\n  readonly data: PageQueryData\n  readonly pageContext: any\n}\n\nconst Tags = ({ pageContext, data }: Props) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n  return (\n    <Layout>\n      <div>\n        <SEO title={`tag ${tagHeader}`}/>\n        <h1>{tagHeader}</h1>\n        <ul>\n          {edges.map(({ node }) => {\n            const { slug } = node.fields\n            const { title } = node.frontmatter\n            return (\n              <li key={slug}>\n                <Link to={`/blog${slug}`}>{title}</Link>\n              </li>\n            )\n          })}\n        </ul>\n        <Link to=\"/tags\">All tags</Link>\n      </div>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    totalCount: number,\n    edges: [\n      { node: any }\n    ]\n  }\n  markdownRemark: {\n    id?: string\n    excerpt?: string\n    html: string\n    frontmatter: {\n      title: string\n      date: string\n    }\n  }\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}