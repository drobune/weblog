{"version":3,"sources":["webpack:///./src/templates/tags.tsx"],"names":["Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","map","node","slug","fields","title","frontmatter","key","to","pageQuery"],"mappings":"2FAAA,6EAqFeA,UA3EF,SAAC,GAAiC,IAA/BC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,KACnBC,EAAQF,EAARE,IADqC,EAEfD,EAAKE,kBAA3BC,EAFqC,EAErCA,MAAOC,EAF8B,EAE9BA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAGf,OACE,2BACE,0BAAKI,GACL,0BACGF,EAAMG,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAE,EAAUH,EAAKI,YAAfD,MACR,OACE,sBAAIE,IAAKJ,GACP,gBAAC,IAAD,CAAMK,GAAE,QAAUL,GAASE,QASnC,gBAAC,IAAD,CAAMG,GAAG,SAAT,cAqDC,IAAMC,EAAY","file":"component---src-templates-tags-tsx-5b9c662b779abf2e5681.js","sourcesContent":["import * as React from \"react\"\nimport PropTypes from \"prop-types\"\n// Components\nimport { Link, graphql } from \"gatsby\"\n\ninterface Props {\n  readonly data: PageQueryData\n  readonly pageContext: any\n}\n\nconst Tags = ({ pageContext, data }: Props) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n  return (\n    <div>\n      <h1>{tagHeader}</h1>\n      <ul>\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <li key={slug}>\n              <Link to={`/blog${slug}`}>{title}</Link>\n            </li>\n          )\n        })}\n      </ul>\n      {/*\n              This links to a page that does not yet exist.\n              You'll come back to it!\n            */}\n      <Link to=\"/tags\">All tags</Link>\n    </div>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    totalCount: number,\n    edges: [\n      { node: any }\n    ]\n  }\n  markdownRemark: {\n    id?: string\n    excerpt?: string\n    html: string\n    frontmatter: {\n      title: string\n      date: string\n    }\n  }\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}