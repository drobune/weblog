{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/blog/c0e08d1663250c39e7ba/","result":{"data":{"markdownRemark":{"html":"<p>serverspecでサーバーの内部のテストは書いているのですが、<br>\nサーバを外部からリクエスト飛ばしてテストするような仕組みが欲しかったのでいろいろ調べてみた。</p>\n<p>テスト書く系<br>\n- <a href=\"https://speakerdeck.com/ryotarai/infrataster-infra-behavior-testing-framework-number-oedo04\" rel=\"nofollow noopener\" target=\"_blank\">infratester</a><br>\n- <a href=\"https://github.com/hannestyden/hyperspec\" rel=\"nofollow noopener\" target=\"_blank\">hyperspec</a></p>\n<ul>\n<li><a href=\"https://github.com/dogweather/rspec-webservice_matchers\" rel=\"nofollow noopener\" target=\"_blank\">webservice_matchers</a></li>\n</ul>\n<p>監視サービス系<br>\n- <a href=\"http://gauntlt.org/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://gauntlt.org/</a><br>\n- <a href=\"http://sensuapp.org/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://sensuapp.org/</a></p>\n<p>監視サービスは金もかかるし、APIドキュメント見るのに消耗しているし<br>\nなるべく自分で書きたい。</p>\n<p>cucumberみたいに複雑なE2Eというより簡単にnginxのroutingとか確認したい。</p>\n<p>っていうか自分がマニュアルで確認する作業が嫌だ。</p>\n<p>というわけで、シンプルそうなwebservice_mathersをチョイスしました。</p>\n<p>見た感じ</p>\n<div class=\"code-frame\" data-lang=\"rb\"><div class=\"highlight\"><pre>\n<span class=\"nb\">require</span> <span class=\"s1\">'rspec/webservice_matchers'</span>\n<p><span class=\"n\">describe</span> <span class=\"s1\">'My app'</span> <span class=\"k\">do</span>\n<span class=\"n\">context</span> <span class=\"s1\">'www.myapp.com'</span> <span class=\"k\">do</span>\n<span class=\"n\">it</span> <span class=\"p\">{</span> <span class=\"n\">should</span> <span class=\"n\">be<em>up</span> <span class=\"p\">}</span>\n<span class=\"n\">it</span> <span class=\"p\">{</span> <span class=\"n\">should</span> <span class=\"n\">have</em>a<em>valid</em>cert</span> <span class=\"p\">}</span>\n<span class=\"k\">end</span></p>\n<p>  <span class=\"n\">it</span> <span class=\"s1\">'serves the \"about\" page without redirecting'</span> <span class=\"k\">do</span>\n<span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s1\">'<a href=\"http://www.myapp.com/about&#x27;\">http://www.myapp.com/about'</a></span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">be_status</span> <span class=\"mi\">200</span>\n<span class=\"k\">end</span></p>\n<p>  <span class=\"n\">it</span> <span class=\"s1\">'only serves via www'</span> <span class=\"k\">do</span>\n<span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s1\">'<a href=\"http://myapp.com&#x27;\">http://myapp.com'</a></span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">redirect<em>permanently</em>to</span> <span class=\"s1\">'<a href=\"http://www.myapp.com/&#x27;\">http://www.myapp.com/'</a></span>\n<span class=\"k\">end</span></p>\n<p>  <span class=\"n\">it</span> <span class=\"s1\">'forces visitors to use https'</span> <span class=\"k\">do</span>\n<span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s1\">'myapp.com'</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">enforce<em>https</em>everywhere</span>\n<span class=\"k\">end</span>\n<span class=\"k\">end</span></p>\n</pre></div></div>\n<p>rspecの拡張なのでよく見る感じです。</p>\n<p>仕事が<a href=\"https://gyazo.com\" rel=\"nofollow noopener\" target=\"_blank\">Gyazo</a>というアップロード系のサービスなので画像ファイルのアップロードもテストに追加しました。</p>\n<p>ジョブのスケジューリングといえばjenkinsが思いついたのですが、いちいちサーバ立てるのが<br>\nめんどうなので、PaaSのherokuで定期的にrakeタスクを回すことにしました。</p>\n<p>heroku schedulerを使えば、10分に1回動かすことができます。</p>\n<p>落ちた場合はチャットに通知するようにしておいて、自作の監視ツールのできあがり。</p>\n<p>webオペレーション系のエンジニアはコード書くいい機会だと思うので、<br>\n自分が手で確認している作業をガンガン自動化していきましょう！</p>","frontmatter":{"date":"2015-04-27","slug":"/blog/c0e08d1663250c39e7ba","title":"【DevOps?】サーバの外部テスト書いて定期的に回す【E2E?】","image":null,"tags":["RSpec","devops","e2e"]}}},"pageContext":{"slug":"/blog/c0e08d1663250c39e7ba"}},"staticQueryHashes":["1342192543"]}